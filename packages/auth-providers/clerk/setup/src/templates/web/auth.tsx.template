import React, { useEffect } from 'react'

import { ClerkLoaded, ClerkProvider, useUser } from '@clerk/clerk-react'

import { createAuth } from '@redwoodjs/auth-clerk-web'

// You can set user roles in a "roles" array on the public metadata in Clerk.
//
// Also, you need to add the following env variables: CLERK_PUBLISHABLE_KEY for web and
// CLERK_SECRET_KEY for api. Both can be found under "API Keys"
// on your Clerk.dev dashboard.
//
// Lastly, be sure to add the key "CLERK_PUBLISHABLE_KEY" in your app's redwood.toml
// [web] config "includeEnvironmentVariables" setting.

export const { AuthProvider: ClerkRwAuthProvider, useAuth } = createAuth()

interface Props {
  children: React.ReactNode
}

const ClerkStatusUpdater = () => {
  const { isSignedIn, user, isLoaded } = useUser()
  const { reauthenticate } = useAuth()

  useEffect(() => {
    if (isLoaded) {
      reauthenticate()
    }
  }, [isSignedIn, user, reauthenticate, isLoaded])

  return null
}

export const AuthProvider = ({ children }: Props) => {
  const publishableKey = process.env.CLERK_PUBLISHABLE_KEY
  const frontendApi = process.env.CLERK_FRONTEND_API_URL || process.env.CLERK_FRONTEND_API

  type ClerkOptions = {publishableKey: string, frontendApi?: never} | {publishableKey?: never, frontendApi: string}

  const clerkOptions: ClerkOptions = publishableKey ? { publishableKey } : { frontendApi };

  return (
    <ClerkProvider {...clerkOptions} navigate={(to) => navigate(to)}>
      <ClerkRwAuthProvider>
        <ClerkLoaded>{children}</ClerkLoaded>
        <ClerkStatusUpdater />
      </ClerkRwAuthProvider>
    </ClerkProvider>
  )
}
